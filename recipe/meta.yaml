{% set osx_arm64_version = "2.4.0" %}
{% set version = "2.4.9" %}

package:
  name: sbcl
  # version: {{ osx_arm64_version }}   # [osx and arm64]
  version: {{ version }}

source:
  # - url: http://prdownloads.sourceforge.net/sbcl/sbcl-{{ osx_arm64_version }}-arm64-darwin-binary.tar.bz2  # [osx and arm64]
  #   sha256: 1d01fac2d9748f769c9246a0a11a2c011d7843337f8f06ca144f5a500e10c117                               # [osx and arm64]

  - url: http://prdownloads.sourceforge.net/sbcl/sbcl-{{ version }}-source.tar.bz2
    sha256: 9970e4ebc5d6943dc64d7ca1f52d9b5cd9fc94cef94d233213d78ec75f3605e2
    folder: sbcl-source
    patches:
      - patches/linux/0001-x86_64-aarch64-ppc64le-zstd.patch  # [linux and (x86_64 or aarch64 or ppc64le)]
      - patches/linux/0002-patchelf.patch  # [linux]
      - patches/osx/0001-update-rpath-zstd.patch  # [osx]
      - patches/win/0001-rewrite-long-xargs.patch  # [win]
      - patches/win/0002-add-link-zstd.patch  # [win]
      - patches/win/0003-add-build-dll.patch  # [win]
      - patches/win/0004-improve-sbcl_home-test.patch  # [win]

build:
  number: 1

requirements:
  build:
    - {{ compiler('c') }}  # [not win]
    - {{ compiler('m2w64_c') }}  # [win and x86_64]
    - {{ stdlib('c') }}
    - gcc  # [win and x86_64]
    # Using experimental m2w64 toolchain since new toolchain not on arm64
    - mingw-w64-ucrt-x86_64-gcc  # [win and arm64]
    - make
    - sbcl  # [build_platform != target_platform]
  host:
    - zstd

test:
  # The test suite only runs correctly within the build directory
  requires:
    - {{ compiler('c') }}  # [not (win)]
    - make  # [not (win)]
    - strace_{{ target_platform }}  # [linux]
    - zstd  # [not (win)]
  source_files:
    - _conda-build  # [not (win)]
  commands:
    - test -f ${PREFIX}/etc/conda/activate.d/sbcl-activate.sh  # [not (win)]
    - test -f ${PREFIX}/etc/conda/deactivate.d/sbcl-deactivate.sh  # [not (win)]
    - if not exist %PREFIX%\\etc\\conda\\activate.d\\sbcl-activate.bat exit /b 1  # [win]
    - if not exist %PREFIX%\\etc\\conda\\deactivate.d\\sbcl-deactivate.bat exit /b 1  # [win]

    - test -f ${PREFIX}/bin/sbcl  # [not (win)]
    - test -f ${PREFIX}/lib/libsbcl.so  # [not (win)]
    - test -f ${PREFIX}/lib/libsbcl.dylib  # [osx]
    - if not exist %PREFIX%\\bin\\sbcl.exe exit 1  # [win]
    - if not exist %PREFIX%\\bin\\libsbcl.dll exit 1  # [win]
    - if not exist %PREFIX%\\lib\\libsbcl.lib exit 1  # [win]

    - test -f ${PREFIX}/lib/sbcl/contrib/asdf.fasl  # [not (win)]
    - test -f ${PREFIX}/lib/sbcl/contrib/uiop.fasl  # [not (win)]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\asdf.fasl exit 1  # [win]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\uiop.fasl exit 1  # [win]

    # linux-only contribs
    - test -f  ${PREFIX}/lib/sbcl/contrib/sb-perf.asd  # [linux]
    - test -f  ${PREFIX}/lib/sbcl/contrib/sb-perf.fasl  # [linux]
    # Not all contribs are built on aarch64 or ppc64le
    - test -f  ${PREFIX}/lib/sbcl/contrib/sb-simd.asd  # [not (aarch64 or ppc64le or win)]
    - test -f  ${PREFIX}/lib/sbcl/contrib/sb-simd.fasl  # [not (aarch64 or ppc64le or win)]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\sb-simd.asd exit 1  # [win]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\sb-simd.fasl exit 1  # [win]
    {% set contribs = [
      "sb-aclrepl", "sb-bsd-sockets", "sb-capstone", "sb-cltl2", "sb-concurrency", "sb-cover",
      "sb-executable", "sb-gmp", "sb-grovel", "sb-introspect", "sb-md5", "sb-mpfr",
      "sb-posix", "sb-queue", "sb-rotate-byte", "sb-rt", "sb-simple-streams", "sb-sprof",
    ] %}
    {% for contrib in contribs %}
    - test -f ${PREFIX}/lib/sbcl/contrib/{{ contrib }}.asd  # [not (win)]
    - test -f ${PREFIX}/lib/sbcl/contrib/{{ contrib }}.fasl  # [not (win)]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\{{ contrib }}.asd exit 1  # [win]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\{{ contrib }}.fasl exit 1  # [win]
    {% endfor %}

    - test -f ${PREFIX}/lib/sbcl/sbcl.core  # [not (win)]
    - test -f ${PREFIX}/lib/sbcl/sbcl.mk  # [not (win)]
    - test -f ${PREFIX}/share/doc/sbcl/BUGS  # [not (win)]
    - test -f ${PREFIX}/share/doc/sbcl/COPYING  # [not (win)]
    - test -f ${PREFIX}/share/doc/sbcl/CREDITS  # [not (win)]
    - test -f ${PREFIX}/share/doc/sbcl/NEWS  # [not (win)]
    - test -f ${PREFIX}/share/man/man1/sbcl.1  # [not (win)]
    - if not exist %PREFIX%\\lib\\sbcl\\sbcl.core exit 1  # [win]
    - if not exist %PREFIX%\\lib\\sbcl\\sbcl.mk exit 1  # [win]
    - if not exist %PREFIX%\\share\\doc\\sbcl\\BUGS exit 1  # [win]
    - if not exist %PREFIX%\\share\\doc\\sbcl\\COPYING exit 1  # [win]
    - if not exist %PREFIX%\\share\\doc\\sbcl\\CREDITS exit 1  # [win]
    - if not exist %PREFIX%\\share\\doc\\sbcl\\NEWS exit 1  # [win]
    - if not exist %PREFIX%\\share\\man\\man1\\sbcl.1 exit 1  # [win]

    # Additional functionality tests
    - sbcl --version
    - sbcl --help
    - sbcl --noinform --disable-debugger --eval "(print (require :asdf))" --disable-debugger --eval "(quit)"

    # Run the test suite - Several platform have few failing tests. This is to have a documentation of the failures
    # The majority of tests in the suite succeed
    - cd _conda-build/tests  # [not (win)]
    - export LD_LIBRARY_PATH=${PREFIX}/lib  # [not (osx or win)]
    - export DYLD_LIBRARY_PATH=${PREFIX}/lib  # [osx and x86_64]
    - bash run-tests.sh || true  # [not (win)]

about:
  home: http://www.sbcl.org
  license: BSD-2-Clause AND MIT
  summary: Steel Bank Common Lisp (SBCL) is a high performance Common Lisp compiler
  description: |
    Steel Bank Common Lisp (SBCL) is a high performance Common Lisp compiler.
    It is open source / free software, with a permissive license. In addition to the
    compiler and runtime system for ANSI Common Lisp, it provides an interactive
    environment including a debugger, a statistical profiler, a code coverage tool,
    and many other extensions.
  doc_url: http://www.sbcl.org/manual/index.html
  license_file:
    - COPYING
    - CREDITS

extra:
  recipe-maintainers:
    - MementoRC
    - wolfv
    - Tobias-Fischer
