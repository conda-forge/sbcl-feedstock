{% set osx_arm64_version = "2.4.0" %}
{% set version = "2.4.4" %}

package:
  name: sbcl
  version: {{ osx_arm64_version }}   # [osx and arm64]
  version: {{ version }}             # [not (osx and arm64)]

source:
  - url: http://prdownloads.sourceforge.net/sbcl/sbcl-{{ osx_arm64_version }}-arm64-darwin-binary.tar.bz2  # [osx and arm64]
    sha256: 1d01fac2d9748f769c9246a0a11a2c011d7843337f8f06ca144f5a500e10c117                               # [osx and arm64]

  - url: http://prdownloads.sourceforge.net/sbcl/sbcl-{{ version }}-source.tar.bz2                         # [not (osx and arm64)]
    sha256: 8a932627b3f1d8e9618f1cdc225edcb002456804697e2c87d140683764a106d5                               # [not (osx and arm64)]
    folder: sbcl-source                                                                                    # [not (osx and arm64)]
    patches:
      - patches/0001-linux64-update-flags-zstd.patch  # [linux and x86_64]
      - patches/0001-osx-update-flags-zstd.patch  # [osx and x86_64]
      - patches/0001-osx-update-rpath-sbcl.patch  # [osx and x86_64]
      - patches/0001-win-use-env-xargs.sh.patch  # [win and x86_64]
      - patches/0001-win-update-flags-zstd.patch  # [win and x86_64]

      - patches/0001-cross-use-qemu.patch  # [aarch64]
      - patches/0001-cross-add-dlopen.patch  # [aarch64]

      - patches/0002-linux-patchelf.patch  # [linux]
      - patches/0002-aarch64-update-flags-zstd.patch  # [aarch64]

build:
  skip: true  # [not ppc64le]
  number: 6

requirements:
  build:
    - {{ compiler('c') }}  # [not win]
    - {{ stdlib('c') }}  # [not win]
    # Current windows gcc toolchain (v5.3) segfaults when building SBCL, need >=12
    # Using experimental msys2 toolchain for now
    - mingw-w64-ucrt-x86_64-gcc  # [win and x86_64]
    - mingw-w64-ucrt-x86_64-gcc-libs  # [win and x86_64]
    - mingw-w64-ucrt-x86_64-zstd  # [win and x86_64]
    - make
    - sbcl  # [build_platform != target_platform]
  host:
    - zstd  # [not ((osx and arm64) or ppc64le)]

test:
  commands:
    - test -f ${PREFIX}/etc/conda/activate.d/sbcl-activate.sh  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/etc/conda/deactivate.d/sbcl-deactivate.sh  # [not (osx and arm64 or ppc64le or win)]
    - if not exist %PREFIX%\\etc\\conda\\activate.d\\sbcl-activate.bat exit /b 1  # [win]
    - if not exist %PREFIX%\\etc\\conda\\deactivate.d\\sbcl-deactivate.bat exit /b 1  # [win]

    - test -f ${PREFIX}/bin/sbcl  # [not (osx and arm64 or ppc64le or win)]
    - if not exist %PREFIX%\\bin\\sbcl.exe exit 1  # [win]

    - test -f ${PREFIX}/lib/sbcl/contrib/asdf.fasl  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/lib/sbcl/contrib/uiop.fasl  # [not (osx and arm64 or ppc64le or win)]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\asdf.fasl exit 1  # [win]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\uiop.fasl exit 1  # [win]

    # Not all contribs are built on Windows - Note this is for when unix builds from source
    # - test -f  ${PREFIX}/lib/sbcl/contrib/sb-perf.asd  # [linux]
    # - test -f  ${PREFIX}/lib/sbcl/contrib/sb-perf.fasl  # [linux]
    {% set contribs = [
      "sb-aclrepl", "sb-bsd-sockets", "sb-capstone", "sb-cltl2", "sb-concurrency", "sb-cover",
      "sb-executable", "sb-gmp", "sb-grovel", "sb-introspect", "sb-md5", "sb-mpfr",
      "sb-posix", "sb-queue", "sb-rotate-byte", "sb-rt", "sb-simd", "sb-simple-streams", "sb-sprof",
    ] %}
    {% for contrib in contribs %}
    - test -f ${PREFIX}/lib/sbcl/contrib/{{ contrib }}.asd  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/lib/sbcl/contrib/{{ contrib }}.fasl  # [not (osx and arm64 or ppc64le or win)]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\{{ contrib }}.asd exit 1  # [win]
    - if not exist %PREFIX%\\lib\\sbcl\\contrib\\{{ contrib }}.fasl exit 1  # [win]
    {% endfor %}

    - test -f ${PREFIX}/lib/sbcl/sbcl.core  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/lib/sbcl/sbcl.mk  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/share/doc/sbcl/BUGS  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/share/doc/sbcl/COPYING  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/share/doc/sbcl/CREDITS  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/share/doc/sbcl/NEWS  # [not (osx and arm64 or ppc64le or win)]
    - test -f ${PREFIX}/share/man/man1/sbcl.1  # [not (osx and arm64 or ppc64le or win)]
    - if not exist %PREFIX%\\lib\\sbcl\\sbcl.core exit 1  # [win]
    - if not exist %PREFIX%\\lib\\sbcl\\sbcl.mk exit 1  # [win]
    - if not exist %PREFIX%\\share\\doc\\sbcl\\BUGS exit 1  # [win]
    - if not exist %PREFIX%\\share\\doc\\sbcl\\COPYING exit 1  # [win]
    - if not exist %PREFIX%\\share\\doc\\sbcl\\CREDITS exit 1  # [win]
    - if not exist %PREFIX%\\share\\doc\\sbcl\\NEWS exit 1  # [win]
    - if not exist %PREFIX%\\share\\man\\man1\\sbcl.1 exit 1  # [win]

    # Additional functionality tests
    - sbcl --version
    - sbcl --help
    - sbcl --noinform --disable-debugger --eval "(print (require :asdf))" --disable-debugger --eval "(quit)"

about:
  home: http://www.sbcl.org
  license: BSD-2-Clause AND MIT
  summary: Steel Bank Common Lisp (SBCL) is a high performance Common Lisp compiler
  description: |
    Steel Bank Common Lisp (SBCL) is a high performance Common Lisp compiler.
    It is open source / free software, with a permissive license. In addition to the
    compiler and runtime system for ANSI Common Lisp, it provides an interactive
    environment including a debugger, a statistical profiler, a code coverage tool,
    and many other extensions.
  doc_url: http://www.sbcl.org/manual/index.html
  license_file:
    - COPYING
    - CREDITS

extra:
  recipe-maintainers:
    - MementoRC
    - wolfv
    - Tobias-Fischer
