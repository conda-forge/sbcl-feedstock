--- make.sh     2024-04-29 16:18:51.000000000 -0500
+++ make.sh     2024-05-27 09:33:08.369198992 -0500
@@ -88,12 +88,12 @@
 maybetime sh make-target-contrib.sh

 # Confirm that default evaluation strategy is :INTERPRET if sb-fasteval was built
-src/runtime/sbcl --core output/sbcl.core --lose-on-corruption --noinform \
+$CROSSCOMPILING_EMULATOR src/runtime/sbcl --core output/sbcl.core --lose-on-corruption --noinform \
   --no-sysinit --no-userinit --disable-debugger \
   --eval '(when (find-package "SB-INTERPRETER") (assert (eq *evaluator-mode* :interpret)))' \
   --quit

-./src/runtime/sbcl --core output/sbcl.core \
+$CROSSCOMPILING_EMULATOR ./src/runtime/sbcl --core output/sbcl.core \
  --lose-on-corruption --noinform $SBCL_MAKE_TARGET_2_OPTIONS --no-sysinit --no-userinit --eval '
     (progn
       #-sb-devel

--- make-config.sh      2024-04-29 16:18:51.000000000 -0500
+++ make-config.sh      2024-05-26 10:16:49.402352909 -0500
@@ -778,7 +778,8 @@
         android_run tools-for-build/determine-endianness >> $ltf
     else
         $GNUMAKE -C tools-for-build determine-endianness -I ../src/runtime
-        tools-for-build/determine-endianness >> $ltf
+        "$CROSSCOMPILING_EMULATOR" tools-for-build/determine-endianness >> $ltf
+        echo ' :os-provides-dlopen' >> $ltf
     fi
     export sbcl_os sbcl_arch android
     sh tools-for-build/grovel-features.sh >> $ltf
--- make-target-1.sh    2024-04-29 16:18:51.000000000 -0500
+++ make-target-1.sh        2024-05-26 15:28:45.928877363 -0500
@@ -49,7 +49,7 @@
     android_run tools-for-build/grovel-headers > output/stuff-groveled-from-headers.lisp
 else
     ( cd tools-for-build; $GNUMAKE -I../src/runtime grovel-headers )
-    tools-for-build/grovel-headers > output/stuff-groveled-from-headers.lisp
+    "$CROSSCOMPILING_EMULATOR" tools-for-build/grovel-headers > output/stuff-groveled-from-headers.lisp
 fi
 touch -r tools-for-build/grovel-headers.c output/stuff-groveled-from-headers.lisp

--- make-target-2.sh    2024-04-29 16:18:51.000000000 -0500
+++ make-target-2.sh    2024-05-26 15:46:56.408979640 -0500
@@ -52,12 +52,12 @@
 fi
 if [ "$warm_compile" = yes ]; then
     echo //doing warm init - compilation phase
-    ./src/runtime/sbcl --core output/cold-sbcl.core \
+    $CROSSCOMPILING_EMULATOR ./src/runtime/sbcl --core output/cold-sbcl.core \
      --lose-on-corruption $SBCL_MAKE_TARGET_2_OPTIONS --no-sysinit --no-userinit \
      --eval '(sb-fasl::!warm-load "src/cold/warm.lisp")' --quit
 fi
 echo //doing warm init - load and dump phase
-./src/runtime/sbcl --noinform --core output/cold-sbcl.core \
+$CROSSCOMPILING_EMULATOR ./src/runtime/sbcl --noinform --core output/cold-sbcl.core \
                    --lose-on-corruption $SBCL_MAKE_TARGET_2_OPTIONS \
                    --no-sysinit --no-userinit --noprint <<EOF
 (progn ${devel})
@@ -73,7 +74,7 @@
  (sb-ext:save-lisp-and-die "output/sbcl.core"))
 EOF

-./src/runtime/sbcl --noinform --core output/sbcl.core \
+"${CROSSCOMPILING_EMULATOR}" ./src/runtime/sbcl --noinform --core output/sbcl.core \
                    --no-sysinit --no-userinit --noprint <<EOF
   (load "validate-float.lisp")
   (check-float-file "output/xfloat-math.lisp-expr")
--- make-target-contrib.sh  2024-04-29 16:18:51.000000000 -0500
+++ make-target-contrib.sh  2024-05-26 18:26:01.520502243 -0500
@@ -45,7 +45,7 @@
 SBCL_HOME="$SBCL_TOP/obj/sbcl-home"
 export SBCL_HOME SBCL_TOP

-SBCL="$SBCL_TOP/src/runtime/sbcl --noinform --core $SBCL_TOP/output/sbcl.core \
+SBCL="$CROSSCOMPILING_EMULATOR $SBCL_TOP/src/runtime/sbcl --noinform --core $SBCL_TOP/output/sbcl.core \
 --lose-on-corruption --disable-debugger --no-sysinit --no-userinit"
 export SBCL

--- contrib/make-contrib.lisp   2024-04-29 16:18:51.000000000 -0500
+++ contrib/make-contrib.lisp   2024-05-26 19:11:51.324156972 -0500
@@ -41,7 +41,8 @@
         (unless (= result 0) (error "C compilation failed"))
         (let ((result
                (process-exit-code
-                (run-program (namestring c-compiler-output) (list (namestring output))
+                (run-program (sb-ext:posix-getenv "CROSSCOMPILING_EMULATOR")
+                             (list (namestring c-compiler-output) (namestring output))
                              :search nil :input nil :output *trace-output*))))
           (unless (= result 0) (error "C execution failed")))))))

